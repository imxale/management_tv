1683947266
waR3U4bTeM%3A533e24c2170cc304c12a68a8d59c823c-e17eeb30176828b18e2e3c20c8d9d7e7
s:163272:"O:33:"phpDocumentor\Reflection\Php\File":14:{s:43:" phpDocumentor\Reflection\Php\File docBlock";N;s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"e17eeb30176828b18e2e3c20c8d9d7e7";s:39:" phpDocumentor\Reflection\Php\File name";s:15:"annotations.php";s:39:" phpDocumentor\Reflection\Php\File path";s:30:"var/cache/prod/annotations.php";s:41:" phpDocumentor\Reflection\Php\File source";s:121537:"<?php

// This file has been auto-generated by the Symfony Cache Component.

return [[

'Symfony%5CBundle%5CFrameworkBundle%5CController%5CAbstractController' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CAbstractController%23setContainer' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CAbstractController%23getParameter' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CAbstractController%23getSubscribedServices' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CAbstractController%23has' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CAbstractController%23get' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CAbstractController%23generateUrl' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CAbstractController%23forward' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CAbstractController%23redirect' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CAbstractController%23redirectToRoute' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CAbstractController%23json' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CAbstractController%23file' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CAbstractController%23addFlash' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CAbstractController%23isGranted' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CAbstractController%23denyAccessUnlessGranted' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CAbstractController%23renderView' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CAbstractController%23render' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CAbstractController%23renderForm' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CAbstractController%23stream' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CAbstractController%23createNotFoundException' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CAbstractController%23createAccessDeniedException' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CAbstractController%23createForm' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CAbstractController%23createFormBuilder' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CAbstractController%23getDoctrine' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CAbstractController%23getUser' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CAbstractController%23isCsrfTokenValid' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CAbstractController%23dispatchMessage' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CAbstractController%23addLink' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CAbstractController%24container' => 0,
'App%5CController%5CCategoriecsaController' => 1,
'App%5CController%5CCategoriecsaController%23index' => 2,
'App%5CController%5CCategoriecsaController%23new' => 3,
'App%5CController%5CCategoriecsaController%23show' => 4,
'App%5CController%5CCategoriecsaController%23edit' => 5,
'App%5CController%5CCategoriecsaController%23delete' => 6,
'App%5CController%5CDiffusionController' => 7,
'App%5CController%5CDiffusionController%23index' => 8,
'App%5CController%5CDiffusionController%23new' => 9,
'App%5CController%5CDiffusionController%23show' => 10,
'App%5CController%5CDiffusionController%23edit' => 11,
'App%5CController%5CDiffusionController%23delete' => 12,
'App%5CController%5CEmissionController' => 13,
'App%5CController%5CEmissionController%23index' => 14,
'App%5CController%5CEmissionController%23new' => 15,
'App%5CController%5CEmissionController%23show' => 16,
'App%5CController%5CEmissionController%23edit' => 17,
'App%5CController%5CEmissionController%23delete' => 18,
'App%5CController%5CGenreController' => 19,
'App%5CController%5CGenreController%23index' => 20,
'App%5CController%5CGenreController%23new' => 21,
'App%5CController%5CGenreController%23show' => 22,
'App%5CController%5CGenreController%23edit' => 23,
'App%5CController%5CGenreController%23delete' => 24,
'App%5CController%5CHomeController' => 0,
'App%5CController%5CHomeController%23index' => 25,
'App%5CController%5CLoginController' => 0,
'App%5CController%5CLoginController%23login' => 26,
'App%5CController%5CLoginController%23logout' => 27,
'App%5CController%5CProgrammeController' => 28,
'App%5CController%5CProgrammeController%23index' => 29,
'App%5CController%5CProgrammeController%23new' => 30,
'App%5CController%5CProgrammeController%23show' => 31,
'App%5CController%5CProgrammeController%23edit' => 32,
'App%5CController%5CProgrammeController%23delete' => 33,
'App%5CController%5CRegistrationController' => 0,
'App%5CController%5CRegistrationController%23register' => 34,
'App%5CController%5CUnsplashController' => 0,
'App%5CController%5CUnsplashController%23index' => 35,
'App%5CController%5CUserController' => 36,
'App%5CController%5CUserController%23index' => 37,
'App%5CController%5CUserController%23show' => 38,
'App%5CController%5CUserController%23edit' => 39,
'App%5CController%5CUserController%23delete' => 40,
'App%5CEntity%5CCategoriecsa' => 41,
'App%5CEntity%5CCategoriecsa%23__construct' => 0,
'App%5CEntity%5CCategoriecsa%23__toString' => 0,
'App%5CEntity%5CCategoriecsa%23getId' => 0,
'App%5CEntity%5CCategoriecsa%23getLibelle' => 0,
'App%5CEntity%5CCategoriecsa%23setLibelle' => 0,
'App%5CEntity%5CCategoriecsa%23getProgrammes' => 0,
'App%5CEntity%5CCategoriecsa%23addProgramme' => 0,
'App%5CEntity%5CCategoriecsa%23removeProgramme' => 0,
'App%5CEntity%5CCategoriecsa%24id' => 42,
'App%5CEntity%5CCategoriecsa%24libelle' => 43,
'App%5CEntity%5CCategoriecsa%24programmes' => 44,
'App%5CEntity%5CDiffusion' => 45,
'App%5CEntity%5CDiffusion%23getId' => 0,
'App%5CEntity%5CDiffusion%23getLejour' => 0,
'App%5CEntity%5CDiffusion%23setLejour' => 0,
'App%5CEntity%5CDiffusion%23getHoraire' => 0,
'App%5CEntity%5CDiffusion%23setHoraire' => 0,
'App%5CEntity%5CDiffusion%23getDirect' => 0,
'App%5CEntity%5CDiffusion%23setDirect' => 0,
'App%5CEntity%5CDiffusion%23getIdProgramme' => 0,
'App%5CEntity%5CDiffusion%23setIdProgramme' => 0,
'App%5CEntity%5CDiffusion%24id' => 42,
'App%5CEntity%5CDiffusion%24lejour' => 46,
'App%5CEntity%5CDiffusion%24horaire' => 47,
'App%5CEntity%5CDiffusion%24direct' => 48,
'App%5CEntity%5CDiffusion%24id_programme' => 49,
'App%5CEntity%5CEmission' => 50,
'App%5CEntity%5CEmission%23__construct' => 0,
'App%5CEntity%5CEmission%23getId' => 0,
'App%5CEntity%5CEmission%23getTitre' => 0,
'App%5CEntity%5CEmission%23setTitre' => 0,
'App%5CEntity%5CEmission%23getTitreoriginal' => 0,
'App%5CEntity%5CEmission%23setTitreoriginal' => 0,
'App%5CEntity%5CEmission%23getAnneproduction' => 0,
'App%5CEntity%5CEmission%23setAnneproduction' => 0,
'App%5CEntity%5CEmission%23getNumsaison' => 0,
'App%5CEntity%5CEmission%23setNumsaison' => 0,
'App%5CEntity%5CEmission%23getProgrammes' => 0,
'App%5CEntity%5CEmission%23addProgramme' => 0,
'App%5CEntity%5CEmission%23removeProgramme' => 0,
'App%5CEntity%5CEmission%23getIdGenre' => 0,
'App%5CEntity%5CEmission%23setIdGenre' => 0,
'App%5CEntity%5CEmission%24id' => 42,
'App%5CEntity%5CEmission%24titre' => 43,
'App%5CEntity%5CEmission%24titreoriginal' => 51,
'App%5CEntity%5CEmission%24anneproduction' => 46,
'App%5CEntity%5CEmission%24numsaison' => 52,
'App%5CEntity%5CEmission%24programmes' => 53,
'App%5CEntity%5CEmission%24genre' => 54,
'App%5CEntity%5CGenre' => 55,
'App%5CEntity%5CGenre%23__construct' => 0,
'App%5CEntity%5CGenre%23getId' => 0,
'App%5CEntity%5CGenre%23getLibelle' => 0,
'App%5CEntity%5CGenre%23setLibelle' => 0,
'App%5CEntity%5CGenre%23getEmissions' => 0,
'App%5CEntity%5CGenre%23addEmission' => 0,
'App%5CEntity%5CGenre%23removeEmission' => 0,
'App%5CEntity%5CGenre%24id' => 42,
'App%5CEntity%5CGenre%24libelle' => 43,
'App%5CEntity%5CGenre%24emissions' => 56,
'App%5CEntity%5CProgramme' => 57,
'App%5CEntity%5CProgramme%23__construct' => 0,
'App%5CEntity%5CProgramme%23getId' => 0,
'App%5CEntity%5CProgramme%23getTitre' => 0,
'App%5CEntity%5CProgramme%23setTitre' => 0,
'App%5CEntity%5CProgramme%23getDuree' => 0,
'App%5CEntity%5CProgramme%23setDuree' => 0,
'App%5CEntity%5CProgramme%23getDiffusions' => 0,
'App%5CEntity%5CProgramme%23addDiffusion' => 0,
'App%5CEntity%5CProgramme%23removeDiffusion' => 0,
'App%5CEntity%5CProgramme%23getIdEmission' => 0,
'App%5CEntity%5CProgramme%23setIdEmission' => 0,
'App%5CEntity%5CProgramme%23getIdCategoriecsa' => 0,
'App%5CEntity%5CProgramme%23setIdCategoriecsa' => 0,
'App%5CEntity%5CProgramme%24id' => 42,
'App%5CEntity%5CProgramme%24titre' => 43,
'App%5CEntity%5CProgramme%24duree' => 58,
'App%5CEntity%5CProgramme%24diffusions' => 59,
'App%5CEntity%5CProgramme%24id_emission' => 60,
'App%5CEntity%5CProgramme%24id_categoriecsa' => 61,
'App%5CEntity%5CUser' => 62,
'App%5CEntity%5CUser%23__construct' => 0,
'App%5CEntity%5CUser%23getId' => 0,
'App%5CEntity%5CUser%23getUsername' => 0,
'App%5CEntity%5CUser%23setUsername' => 0,
'App%5CEntity%5CUser%23getUserIdentifier' => 0,
'App%5CEntity%5CUser%23getRoles' => 0,
'App%5CEntity%5CUser%23setRoles' => 0,
'App%5CEntity%5CUser%23getPassword' => 0,
'App%5CEntity%5CUser%23setPassword' => 0,
'App%5CEntity%5CUser%23getSalt' => 0,
'App%5CEntity%5CUser%23eraseCredentials' => 0,
'App%5CEntity%5CUser%24id' => 42,
'App%5CEntity%5CUser%24username' => 63,
'App%5CEntity%5CUser%24roles' => 64,
'App%5CEntity%5CUser%24password' => 65,
'Doctrine%5CBundle%5CDoctrineBundle%5CController%5CProfilerController' => 0,
'Doctrine%5CBundle%5CDoctrineBundle%5CController%5CProfilerController%23__construct' => 0,
'Doctrine%5CBundle%5CDoctrineBundle%5CController%5CProfilerController%23explainAction' => 0,
'Doctrine%5CBundle%5CDoctrineBundle%5CController%5CProfilerController%23explainSQLitePlatform' => 0,
'Doctrine%5CBundle%5CDoctrineBundle%5CController%5CProfilerController%23explainSQLServerPlatform' => 0,
'Doctrine%5CBundle%5CDoctrineBundle%5CController%5CProfilerController%23explainOtherPlatform' => 0,
'Doctrine%5CBundle%5CDoctrineBundle%5CController%5CProfilerController%23explainOraclePlatform' => 0,
'Doctrine%5CBundle%5CDoctrineBundle%5CController%5CProfilerController%24twig' => 0,
'Doctrine%5CBundle%5CDoctrineBundle%5CController%5CProfilerController%24registry' => 0,
'Doctrine%5CBundle%5CDoctrineBundle%5CController%5CProfilerController%24profiler' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23__construct' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23addInsert' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23getInserts' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23getSelectSQL' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23getCountSQL' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23getInsertSQL' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23getResultSetMapping' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23getSelectConditionStatementSQL' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23exists' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23getCacheRegion' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23getEntityHydrator' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23storeEntityCache' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23storeJoinedAssociations' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23getHash' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23expandParameters' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23expandCriteriaParameters' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23getClassMetadata' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23getManyToManyCollection' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23getOneToManyCollection' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23getOwningTable' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23executeInserts' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23load' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23loadAll' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23loadById' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23count' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23loadCriteria' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23loadManyToManyCollection' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23loadOneToManyCollection' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23loadOneToOneEntity' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23lock' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23refresh' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%23buildCollectionCacheKey' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CCachedPersister%23afterTransactionComplete' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CCachedPersister%23afterTransactionRolledBack' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CEntityPersister%23update' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CEntityPersister%23delete' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%24uow' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%24metadataFactory' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%24persister' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%24class' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%24queuedCache' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%24region' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%24timestampRegion' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%24timestampKey' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%24hydrator' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%24cache' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%24cacheLogger' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%24regionName' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CAbstractEntityPersister%24joinedAssociations' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CCachedEntityPersister' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CCachedEntityPersister%23getEntityHydrator' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CCachedEntityPersister%23storeEntityCache' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CCachedPersister%23getCacheRegion' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CEntityPersister%23getClassMetadata' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CEntityPersister%23getResultSetMapping' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CEntityPersister%23getInserts' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CEntityPersister%23getInsertSQL' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CEntityPersister%23getSelectSQL' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CEntityPersister%23getCountSQL' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CEntityPersister%23expandParameters' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CEntityPersister%23expandCriteriaParameters' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CEntityPersister%23getSelectConditionStatementSQL' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CEntityPersister%23addInsert' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CEntityPersister%23executeInserts' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CEntityPersister%23count' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CEntityPersister%23getOwningTable' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CEntityPersister%23load' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CEntityPersister%23loadById' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CEntityPersister%23loadOneToOneEntity' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CEntityPersister%23refresh' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CEntityPersister%23loadCriteria' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CEntityPersister%23loadAll' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CEntityPersister%23getManyToManyCollection' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CEntityPersister%23loadManyToManyCollection' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CEntityPersister%23loadOneToManyCollection' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CEntityPersister%23lock' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CEntityPersister%23getOneToManyCollection' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CEntityPersister%23exists' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CNonStrictReadWriteCachedEntityPersister' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CNonStrictReadWriteCachedEntityPersister%23afterTransactionComplete' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CNonStrictReadWriteCachedEntityPersister%23afterTransactionRolledBack' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CNonStrictReadWriteCachedEntityPersister%23delete' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CNonStrictReadWriteCachedEntityPersister%23update' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CNonStrictReadWriteCachedEntityPersister%23updateCache' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CReadOnlyCachedEntityPersister' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CReadOnlyCachedEntityPersister%23update' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CReadWriteCachedEntityPersister' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CReadWriteCachedEntityPersister%23__construct' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CReadWriteCachedEntityPersister%23afterTransactionComplete' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CReadWriteCachedEntityPersister%23afterTransactionRolledBack' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CReadWriteCachedEntityPersister%23delete' => 0,
'Doctrine%5CORM%5CCache%5CPersister%5CEntity%5CReadWriteCachedEntityPersister%23update' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CAbstractEntityInheritancePersister' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CAbstractEntityInheritancePersister%23prepareInsertData' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CAbstractEntityInheritancePersister%23getDiscriminatorColumnTableName' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CAbstractEntityInheritancePersister%23getSelectColumnSQL' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CAbstractEntityInheritancePersister%23getSelectJoinColumnSQL' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23__construct' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23getClassMetadata' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23getResultSetMapping' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23addInsert' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23getInserts' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23executeInserts' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23assignDefaultVersionAndUpsertableValues' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23fetchVersionAndNotUpsertableValues' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23update' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23updateTable' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23deleteJoinTableRecords' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23delete' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23prepareUpdateData' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23getOwningTable' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23load' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23loadById' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23loadOneToOneEntity' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23refresh' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23count' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23loadCriteria' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23expandCriteriaParameters' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23loadAll' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23getManyToManyCollection' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23loadManyToManyCollection' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23getSelectSQL' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23getCountSQL' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23getOrderBySQL' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23getSelectColumnsSQL' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23getSelectColumnAssociationSQL' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23getSelectManyToManyJoinSQL' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23getInsertSQL' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23getInsertColumnList' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23getSQLTableAlias' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23lock' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23getLockTablesSql' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23getSelectConditionCriteriaSQL' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23getSelectConditionStatementSQL' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23getSelectConditionSQL' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23getOneToManyCollection' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23loadOneToManyCollection' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23expandParameters' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23exists' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23getJoinSQLForJoinColumns' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23getSQLColumnAlias' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23generateFilterConditionSQL' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23switchPersisterContext' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23getClassIdentifiersTypes' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%24class' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%24conn' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%24platform' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%24em' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%24queuedInserts' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%24columnTypes' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%24quotedColumns' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%24quoteStrategy' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%24currentPersisterContext' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23extractIdentifierTypes' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23prepareInsertData' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23loadArrayFromResult' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23loadCollectionFromStatement' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23getManyToManyStatement' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23getSelectColumnSQL' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23getSelectConditionStatementColumnSQL' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23getOneToManyStatement' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23expandToManyParameters' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23getTypes' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23getValues' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%23getIndividualValue' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%24comparisonMap' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%24insertSql' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%24identifierFlattener' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%24limitsHandlingContext' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CBasicEntityPersister%24noLimitsContext' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CCachedPersisterContext' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CCachedPersisterContext%23__construct' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CCachedPersisterContext%24class' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CCachedPersisterContext%24rsm' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CCachedPersisterContext%24selectColumnListSql' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CCachedPersisterContext%24selectJoinSql' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CCachedPersisterContext%24sqlAliasCounter' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CCachedPersisterContext%24sqlTableAliases' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CCachedPersisterContext%24handlesLimits' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CEntityPersister' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CJoinedSubclassPersister' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CJoinedSubclassPersister%23getDiscriminatorColumnTableName' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CJoinedSubclassPersister%23getVersionedClassMetadata' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CJoinedSubclassPersister%23getOwningTable' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CJoinedSubclassPersister%23executeInserts' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CJoinedSubclassPersister%23update' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CJoinedSubclassPersister%23delete' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CJoinedSubclassPersister%23getSelectSQL' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CJoinedSubclassPersister%23getCountSQL' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CJoinedSubclassPersister%23getLockTablesSql' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CJoinedSubclassPersister%23getSelectColumnsSQL' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CJoinedSubclassPersister%23getInsertColumnList' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CJoinedSubclassPersister%23assignDefaultVersionAndUpsertableValues' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CJoinedSubclassPersister%23getJoinSql' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CJoinedSubclassPersister%23getSQLResultCasing' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CJoinedSubclassPersister%24owningTableMap' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CJoinedSubclassPersister%24quotedTableMap' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CSingleTablePersister' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CSingleTablePersister%23getDiscriminatorColumnTableName' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CSingleTablePersister%23getSelectColumnsSQL' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CSingleTablePersister%23getInsertColumnList' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CSingleTablePersister%23getSQLTableAlias' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CSingleTablePersister%23getSelectConditionSQL' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CSingleTablePersister%23getSelectConditionCriteriaSQL' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CSingleTablePersister%23getSelectConditionDiscriminatorValueSQL' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CSingleTablePersister%23generateFilterConditionSQL' => 0,
'Doctrine%5CORM%5CPersisters%5CEntity%5CSingleTablePersister%23getSQLResultCasing' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CRedirectController' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CRedirectController%23__construct' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CRedirectController%23redirectAction' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CRedirectController%23urlRedirectAction' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CRedirectController%23__invoke' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CRedirectController%24router' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CRedirectController%24httpPort' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CRedirectController%24httpsPort' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CTemplateController' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CTemplateController%23__construct' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CTemplateController%23templateAction' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CTemplateController%23__invoke' => 0,
'Symfony%5CBundle%5CFrameworkBundle%5CController%5CTemplateController%24twig' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CExceptionPanelController' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CExceptionPanelController%23__construct' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CExceptionPanelController%23body' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CExceptionPanelController%23stylesheet' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CExceptionPanelController%24errorRenderer' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CExceptionPanelController%24profiler' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CProfilerController' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CProfilerController%23__construct' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CProfilerController%23homeAction' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CProfilerController%23panelAction' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CProfilerController%23toolbarAction' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CProfilerController%23searchBarAction' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CProfilerController%23searchResultsAction' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CProfilerController%23searchAction' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CProfilerController%23phpinfoAction' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CProfilerController%23openAction' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CProfilerController%23getTemplateManager' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CProfilerController%23denyAccessIfProfilerDisabled' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CProfilerController%23renderWithCspNonces' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CProfilerController%24templateManager' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CProfilerController%24generator' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CProfilerController%24profiler' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CProfilerController%24twig' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CProfilerController%24templates' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CProfilerController%24cspHandler' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CProfilerController%24baseDir' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CRouterController' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CRouterController%23__construct' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CRouterController%23panelAction' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CRouterController%23getTraces' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CRouterController%24profiler' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CRouterController%24twig' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CRouterController%24matcher' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CRouterController%24routes' => 0,
'Symfony%5CBundle%5CWebProfilerBundle%5CController%5CRouterController%24expressionLanguageProviders' => 0,
'Symfony%5CComponent%5CSecurity%5CHttp%5CController%5CUserValueResolver' => 0,
'Symfony%5CComponent%5CSecurity%5CHttp%5CController%5CUserValueResolver%23__construct' => 0,
'Symfony%5CComponent%5CSecurity%5CHttp%5CController%5CUserValueResolver%23supports' => 0,
'Symfony%5CComponent%5CSecurity%5CHttp%5CController%5CUserValueResolver%23resolve' => 0,
'Symfony%5CComponent%5CSecurity%5CHttp%5CController%5CUserValueResolver%24tokenStorage' => 0,

], [

0 => [],
1 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    '/categoriecsa',
                ],
                'methods' => [
                    [],
                ],
                'schemes' => [
                    [],
                ],
                'name' => [
                    null,
                ],
                'requirements' => [
                    [],
                ],
                'options' => [
                    [],
                ],
                'defaults' => [
                    [],
                ],
                'host' => [
                    null,
                ],
                'condition' => [
                    null,
                ],
                'priority' => [
                    null,
                ],
                'env' => [
                    null,
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
2 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted')),
            clone ($p['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted' => [
                'attributes' => [
                    'ROLE_USER',
                ],
            ],
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    1 => '/',
                ],
                'methods' => [
                    1 => [
                        'GET',
                    ],
                ],
                'schemes' => [
                    1 => [],
                ],
                'name' => [
                    1 => 'app_categoriecsa_index',
                ],
                'requirements' => [
                    1 => [],
                ],
                'options' => [
                    1 => [],
                ],
                'defaults' => [
                    1 => [],
                ],
                'host' => [
                    1 => null,
                ],
                'condition' => [
                    1 => null,
                ],
                'priority' => [
                    1 => null,
                ],
                'env' => [
                    1 => null,
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
        ],
        []
    );
},
3 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted')),
            clone ($p['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted' => [
                'attributes' => [
                    'ROLE_EDITOR',
                ],
            ],
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    1 => '/new',
                ],
                'methods' => [
                    1 => [
                        'GET',
                        'POST',
                    ],
                ],
                'schemes' => [
                    1 => [],
                ],
                'name' => [
                    1 => 'app_categoriecsa_new',
                ],
                'requirements' => [
                    1 => [],
                ],
                'options' => [
                    1 => [],
                ],
                'defaults' => [
                    1 => [],
                ],
                'host' => [
                    1 => null,
                ],
                'condition' => [
                    1 => null,
                ],
                'priority' => [
                    1 => null,
                ],
                'env' => [
                    1 => null,
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
        ],
        []
    );
},
4 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted')),
            clone ($p['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted' => [
                'attributes' => [
                    'ROLE_USER',
                ],
            ],
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    1 => '/{id}',
                ],
                'methods' => [
                    1 => [
                        'GET',
                    ],
                ],
                'schemes' => [
                    1 => [],
                ],
                'name' => [
                    1 => 'app_categoriecsa_show',
                ],
                'requirements' => [
                    1 => [],
                ],
                'options' => [
                    1 => [],
                ],
                'defaults' => [
                    1 => [],
                ],
                'host' => [
                    1 => null,
                ],
                'condition' => [
                    1 => null,
                ],
                'priority' => [
                    1 => null,
                ],
                'env' => [
                    1 => null,
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
        ],
        []
    );
},
5 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted')),
            clone ($p['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted' => [
                'attributes' => [
                    'ROLE_EDITOR',
                ],
            ],
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    1 => '/{id}/edit',
                ],
                'methods' => [
                    1 => [
                        'GET',
                        'POST',
                    ],
                ],
                'schemes' => [
                    1 => [],
                ],
                'name' => [
                    1 => 'app_categoriecsa_edit',
                ],
                'requirements' => [
                    1 => [],
                ],
                'options' => [
                    1 => [],
                ],
                'defaults' => [
                    1 => [],
                ],
                'host' => [
                    1 => null,
                ],
                'condition' => [
                    1 => null,
                ],
                'priority' => [
                    1 => null,
                ],
                'env' => [
                    1 => null,
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
        ],
        []
    );
},
6 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted')),
            clone ($p['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted' => [
                'attributes' => [
                    'ROLE_EDITOR',
                ],
            ],
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    1 => '/{id}',
                ],
                'methods' => [
                    1 => [
                        'POST',
                    ],
                ],
                'schemes' => [
                    1 => [],
                ],
                'name' => [
                    1 => 'app_categoriecsa_delete',
                ],
                'requirements' => [
                    1 => [],
                ],
                'options' => [
                    1 => [],
                ],
                'defaults' => [
                    1 => [],
                ],
                'host' => [
                    1 => null,
                ],
                'condition' => [
                    1 => null,
                ],
                'priority' => [
                    1 => null,
                ],
                'env' => [
                    1 => null,
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
        ],
        []
    );
},
7 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    '/diffusion',
                ],
                'methods' => [
                    [],
                ],
                'schemes' => [
                    [],
                ],
                'name' => [
                    null,
                ],
                'requirements' => [
                    [],
                ],
                'options' => [
                    [],
                ],
                'defaults' => [
                    [],
                ],
                'host' => [
                    null,
                ],
                'condition' => [
                    null,
                ],
                'priority' => [
                    null,
                ],
                'env' => [
                    null,
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
8 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted')),
            clone ($p['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted' => [
                'attributes' => [
                    'ROLE_USER',
                ],
            ],
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    1 => '/',
                ],
                'methods' => [
                    1 => [
                        'GET',
                    ],
                ],
                'schemes' => [
                    1 => [],
                ],
                'name' => [
                    1 => 'app_diffusion_index',
                ],
                'requirements' => [
                    1 => [],
                ],
                'options' => [
                    1 => [],
                ],
                'defaults' => [
                    1 => [],
                ],
                'host' => [
                    1 => null,
                ],
                'condition' => [
                    1 => null,
                ],
                'priority' => [
                    1 => null,
                ],
                'env' => [
                    1 => null,
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
        ],
        []
    );
},
9 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted')),
            clone ($p['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted' => [
                'attributes' => [
                    'ROLE_EDITOR',
                ],
            ],
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    1 => '/new',
                ],
                'methods' => [
                    1 => [
                        'GET',
                        'POST',
                    ],
                ],
                'schemes' => [
                    1 => [],
                ],
                'name' => [
                    1 => 'app_diffusion_new',
                ],
                'requirements' => [
                    1 => [],
                ],
                'options' => [
                    1 => [],
                ],
                'defaults' => [
                    1 => [],
                ],
                'host' => [
                    1 => null,
                ],
                'condition' => [
                    1 => null,
                ],
                'priority' => [
                    1 => null,
                ],
                'env' => [
                    1 => null,
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
        ],
        []
    );
},
10 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted')),
            clone ($p['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted' => [
                'attributes' => [
                    'ROLE_USER',
                ],
            ],
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    1 => '/{id}',
                ],
                'methods' => [
                    1 => [
                        'GET',
                    ],
                ],
                'schemes' => [
                    1 => [],
                ],
                'name' => [
                    1 => 'app_diffusion_show',
                ],
                'requirements' => [
                    1 => [],
                ],
                'options' => [
                    1 => [],
                ],
                'defaults' => [
                    1 => [],
                ],
                'host' => [
                    1 => null,
                ],
                'condition' => [
                    1 => null,
                ],
                'priority' => [
                    1 => null,
                ],
                'env' => [
                    1 => null,
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
        ],
        []
    );
},
11 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted')),
            clone ($p['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted' => [
                'attributes' => [
                    'ROLE_EDITOR',
                ],
            ],
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    1 => '/{id}/edit',
                ],
                'methods' => [
                    1 => [
                        'GET',
                        'POST',
                    ],
                ],
                'schemes' => [
                    1 => [],
                ],
                'name' => [
                    1 => 'app_diffusion_edit',
                ],
                'requirements' => [
                    1 => [],
                ],
                'options' => [
                    1 => [],
                ],
                'defaults' => [
                    1 => [],
                ],
                'host' => [
                    1 => null,
                ],
                'condition' => [
                    1 => null,
                ],
                'priority' => [
                    1 => null,
                ],
                'env' => [
                    1 => null,
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
        ],
        []
    );
},
12 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted')),
            clone ($p['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted' => [
                'attributes' => [
                    'ROLE_EDITOR',
                ],
            ],
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    1 => '/{id}',
                ],
                'methods' => [
                    1 => [
                        'POST',
                    ],
                ],
                'schemes' => [
                    1 => [],
                ],
                'name' => [
                    1 => 'app_diffusion_delete',
                ],
                'requirements' => [
                    1 => [],
                ],
                'options' => [
                    1 => [],
                ],
                'defaults' => [
                    1 => [],
                ],
                'host' => [
                    1 => null,
                ],
                'condition' => [
                    1 => null,
                ],
                'priority' => [
                    1 => null,
                ],
                'env' => [
                    1 => null,
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
        ],
        []
    );
},
13 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    '/emission',
                ],
                'methods' => [
                    [],
                ],
                'schemes' => [
                    [],
                ],
                'name' => [
                    null,
                ],
                'requirements' => [
                    [],
                ],
                'options' => [
                    [],
                ],
                'defaults' => [
                    [],
                ],
                'host' => [
                    null,
                ],
                'condition' => [
                    null,
                ],
                'priority' => [
                    null,
                ],
                'env' => [
                    null,
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
14 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted')),
            clone ($p['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted' => [
                'attributes' => [
                    'ROLE_USER',
                ],
            ],
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    1 => '/',
                ],
                'methods' => [
                    1 => [
                        'GET',
                    ],
                ],
                'schemes' => [
                    1 => [],
                ],
                'name' => [
                    1 => 'app_emission_index',
                ],
                'requirements' => [
                    1 => [],
                ],
                'options' => [
                    1 => [],
                ],
                'defaults' => [
                    1 => [],
                ],
                'host' => [
                    1 => null,
                ],
                'condition' => [
                    1 => null,
                ],
                'priority' => [
                    1 => null,
                ],
                'env' => [
                    1 => null,
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
        ],
        []
    );
},
15 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted')),
            clone ($p['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted' => [
                'attributes' => [
                    'ROLE_EDITOR',
                ],
            ],
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    1 => '/new',
                ],
                'methods' => [
                    1 => [
                        'GET',
                        'POST',
                    ],
                ],
                'schemes' => [
                    1 => [],
                ],
                'name' => [
                    1 => 'app_emission_new',
                ],
                'requirements' => [
                    1 => [],
                ],
                'options' => [
                    1 => [],
                ],
                'defaults' => [
                    1 => [],
                ],
                'host' => [
                    1 => null,
                ],
                'condition' => [
                    1 => null,
                ],
                'priority' => [
                    1 => null,
                ],
                'env' => [
                    1 => null,
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
        ],
        []
    );
},
16 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted')),
            clone ($p['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted' => [
                'attributes' => [
                    'ROLE_USER',
                ],
            ],
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    1 => '/{id}',
                ],
                'methods' => [
                    1 => [
                        'GET',
                    ],
                ],
                'schemes' => [
                    1 => [],
                ],
                'name' => [
                    1 => 'app_emission_show',
                ],
                'requirements' => [
                    1 => [],
                ],
                'options' => [
                    1 => [],
                ],
                'defaults' => [
                    1 => [],
                ],
                'host' => [
                    1 => null,
                ],
                'condition' => [
                    1 => null,
                ],
                'priority' => [
                    1 => null,
                ],
                'env' => [
                    1 => null,
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
        ],
        []
    );
},
17 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted')),
            clone ($p['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted' => [
                'attributes' => [
                    'ROLE_EDITOR',
                ],
            ],
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    1 => '/{id}/edit',
                ],
                'methods' => [
                    1 => [
                        'GET',
                        'POST',
                    ],
                ],
                'schemes' => [
                    1 => [],
                ],
                'name' => [
                    1 => 'app_emission_edit',
                ],
                'requirements' => [
                    1 => [],
                ],
                'options' => [
                    1 => [],
                ],
                'defaults' => [
                    1 => [],
                ],
                'host' => [
                    1 => null,
                ],
                'condition' => [
                    1 => null,
                ],
                'priority' => [
                    1 => null,
                ],
                'env' => [
                    1 => null,
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
        ],
        []
    );
},
18 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted')),
            clone ($p['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted' => [
                'attributes' => [
                    'ROLE_EDITOR',
                ],
            ],
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    1 => '/{id}',
                ],
                'methods' => [
                    1 => [
                        'POST',
                    ],
                ],
                'schemes' => [
                    1 => [],
                ],
                'name' => [
                    1 => 'app_emission_delete',
                ],
                'requirements' => [
                    1 => [],
                ],
                'options' => [
                    1 => [],
                ],
                'defaults' => [
                    1 => [],
                ],
                'host' => [
                    1 => null,
                ],
                'condition' => [
                    1 => null,
                ],
                'priority' => [
                    1 => null,
                ],
                'env' => [
                    1 => null,
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
        ],
        []
    );
},
19 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    '/genre',
                ],
                'methods' => [
                    [],
                ],
                'schemes' => [
                    [],
                ],
                'name' => [
                    null,
                ],
                'requirements' => [
                    [],
                ],
                'options' => [
                    [],
                ],
                'defaults' => [
                    [],
                ],
                'host' => [
                    null,
                ],
                'condition' => [
                    null,
                ],
                'priority' => [
                    null,
                ],
                'env' => [
                    null,
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
20 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted')),
            clone ($p['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted' => [
                'attributes' => [
                    'ROLE_USER',
                ],
            ],
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    1 => '/',
                ],
                'methods' => [
                    1 => [
                        'GET',
                    ],
                ],
                'schemes' => [
                    1 => [],
                ],
                'name' => [
                    1 => 'app_genre_index',
                ],
                'requirements' => [
                    1 => [],
                ],
                'options' => [
                    1 => [],
                ],
                'defaults' => [
                    1 => [],
                ],
                'host' => [
                    1 => null,
                ],
                'condition' => [
                    1 => null,
                ],
                'priority' => [
                    1 => null,
                ],
                'env' => [
                    1 => null,
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
        ],
        []
    );
},
21 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted')),
            clone ($p['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted' => [
                'attributes' => [
                    'ROLE_EDITOR',
                ],
            ],
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    1 => '/new',
                ],
                'methods' => [
                    1 => [
                        'GET',
                        'POST',
                    ],
                ],
                'schemes' => [
                    1 => [],
                ],
                'name' => [
                    1 => 'app_genre_new',
                ],
                'requirements' => [
                    1 => [],
                ],
                'options' => [
                    1 => [],
                ],
                'defaults' => [
                    1 => [],
                ],
                'host' => [
                    1 => null,
                ],
                'condition' => [
                    1 => null,
                ],
                'priority' => [
                    1 => null,
                ],
                'env' => [
                    1 => null,
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
        ],
        []
    );
},
22 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted')),
            clone ($p['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted' => [
                'attributes' => [
                    'ROLE_USER',
                ],
            ],
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    1 => '/{id}',
                ],
                'methods' => [
                    1 => [
                        'GET',
                    ],
                ],
                'schemes' => [
                    1 => [],
                ],
                'name' => [
                    1 => 'app_genre_show',
                ],
                'requirements' => [
                    1 => [],
                ],
                'options' => [
                    1 => [],
                ],
                'defaults' => [
                    1 => [],
                ],
                'host' => [
                    1 => null,
                ],
                'condition' => [
                    1 => null,
                ],
                'priority' => [
                    1 => null,
                ],
                'env' => [
                    1 => null,
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
        ],
        []
    );
},
23 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted')),
            clone ($p['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted' => [
                'attributes' => [
                    'ROLE_EDITOR',
                ],
            ],
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    1 => '/{id}/edit',
                ],
                'methods' => [
                    1 => [
                        'GET',
                        'POST',
                    ],
                ],
                'schemes' => [
                    1 => [],
                ],
                'name' => [
                    1 => 'app_genre_edit',
                ],
                'requirements' => [
                    1 => [],
                ],
                'options' => [
                    1 => [],
                ],
                'defaults' => [
                    1 => [],
                ],
                'host' => [
                    1 => null,
                ],
                'condition' => [
                    1 => null,
                ],
                'priority' => [
                    1 => null,
                ],
                'env' => [
                    1 => null,
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
        ],
        []
    );
},
24 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted')),
            clone ($p['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted' => [
                'attributes' => [
                    'ROLE_EDITOR',
                ],
            ],
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    1 => '/{id}',
                ],
                'methods' => [
                    1 => [
                        'POST',
                    ],
                ],
                'schemes' => [
                    1 => [],
                ],
                'name' => [
                    1 => 'app_genre_delete',
                ],
                'requirements' => [
                    1 => [],
                ],
                'options' => [
                    1 => [],
                ],
                'defaults' => [
                    1 => [],
                ],
                'host' => [
                    1 => null,
                ],
                'condition' => [
                    1 => null,
                ],
                'priority' => [
                    1 => null,
                ],
                'env' => [
                    1 => null,
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
        ],
        []
    );
},
25 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    '/home',
                ],
                'methods' => [
                    [],
                ],
                'schemes' => [
                    [],
                ],
                'name' => [
                    'app_home',
                ],
                'requirements' => [
                    [],
                ],
                'options' => [
                    [],
                ],
                'defaults' => [
                    [],
                ],
                'host' => [
                    null,
                ],
                'condition' => [
                    null,
                ],
                'priority' => [
                    null,
                ],
                'env' => [
                    null,
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
26 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    '/login',
                ],
                'methods' => [
                    [],
                ],
                'schemes' => [
                    [],
                ],
                'name' => [
                    'app_login',
                ],
                'requirements' => [
                    [],
                ],
                'options' => [
                    [],
                ],
                'defaults' => [
                    [],
                ],
                'host' => [
                    null,
                ],
                'condition' => [
                    null,
                ],
                'priority' => [
                    null,
                ],
                'env' => [
                    null,
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
27 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    '/logout',
                ],
                'methods' => [
                    [],
                ],
                'schemes' => [
                    [],
                ],
                'name' => [
                    'app_logout',
                ],
                'requirements' => [
                    [],
                ],
                'options' => [
                    [],
                ],
                'defaults' => [
                    [],
                ],
                'host' => [
                    null,
                ],
                'condition' => [
                    null,
                ],
                'priority' => [
                    null,
                ],
                'env' => [
                    null,
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
28 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    '/programme',
                ],
                'methods' => [
                    [],
                ],
                'schemes' => [
                    [],
                ],
                'name' => [
                    null,
                ],
                'requirements' => [
                    [],
                ],
                'options' => [
                    [],
                ],
                'defaults' => [
                    [],
                ],
                'host' => [
                    null,
                ],
                'condition' => [
                    null,
                ],
                'priority' => [
                    null,
                ],
                'env' => [
                    null,
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
29 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted')),
            clone ($p['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted' => [
                'attributes' => [
                    'ROLE_USER',
                ],
            ],
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    1 => '/',
                ],
                'methods' => [
                    1 => [
                        'GET',
                    ],
                ],
                'schemes' => [
                    1 => [],
                ],
                'name' => [
                    1 => 'app_programme_index',
                ],
                'requirements' => [
                    1 => [],
                ],
                'options' => [
                    1 => [],
                ],
                'defaults' => [
                    1 => [],
                ],
                'host' => [
                    1 => null,
                ],
                'condition' => [
                    1 => null,
                ],
                'priority' => [
                    1 => null,
                ],
                'env' => [
                    1 => null,
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
        ],
        []
    );
},
30 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted')),
            clone ($p['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted' => [
                'attributes' => [
                    'ROLE_EDITOR',
                ],
            ],
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    1 => '/new',
                ],
                'methods' => [
                    1 => [
                        'GET',
                        'POST',
                    ],
                ],
                'schemes' => [
                    1 => [],
                ],
                'name' => [
                    1 => 'app_programme_new',
                ],
                'requirements' => [
                    1 => [],
                ],
                'options' => [
                    1 => [],
                ],
                'defaults' => [
                    1 => [],
                ],
                'host' => [
                    1 => null,
                ],
                'condition' => [
                    1 => null,
                ],
                'priority' => [
                    1 => null,
                ],
                'env' => [
                    1 => null,
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
        ],
        []
    );
},
31 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted')),
            clone ($p['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted' => [
                'attributes' => [
                    'ROLE_USER',
                ],
            ],
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    1 => '/{id}',
                ],
                'methods' => [
                    1 => [
                        'GET',
                    ],
                ],
                'schemes' => [
                    1 => [],
                ],
                'name' => [
                    1 => 'app_programme_show',
                ],
                'requirements' => [
                    1 => [],
                ],
                'options' => [
                    1 => [],
                ],
                'defaults' => [
                    1 => [],
                ],
                'host' => [
                    1 => null,
                ],
                'condition' => [
                    1 => null,
                ],
                'priority' => [
                    1 => null,
                ],
                'env' => [
                    1 => null,
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
        ],
        []
    );
},
32 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted')),
            clone ($p['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted' => [
                'attributes' => [
                    'ROLE_EDITOR',
                ],
            ],
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    1 => '/{id}/edit',
                ],
                'methods' => [
                    1 => [
                        'GET',
                        'POST',
                    ],
                ],
                'schemes' => [
                    1 => [],
                ],
                'name' => [
                    1 => 'app_programme_edit',
                ],
                'requirements' => [
                    1 => [],
                ],
                'options' => [
                    1 => [],
                ],
                'defaults' => [
                    1 => [],
                ],
                'host' => [
                    1 => null,
                ],
                'condition' => [
                    1 => null,
                ],
                'priority' => [
                    1 => null,
                ],
                'env' => [
                    1 => null,
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
        ],
        []
    );
},
33 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted')),
            clone ($p['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\IsGranted' => [
                'attributes' => [
                    'ROLE_EDITOR',
                ],
            ],
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    1 => '/{id}',
                ],
                'methods' => [
                    1 => [
                        'POST',
                    ],
                ],
                'schemes' => [
                    1 => [],
                ],
                'name' => [
                    1 => 'app_programme_delete',
                ],
                'requirements' => [
                    1 => [],
                ],
                'options' => [
                    1 => [],
                ],
                'defaults' => [
                    1 => [],
                ],
                'host' => [
                    1 => null,
                ],
                'condition' => [
                    1 => null,
                ],
                'priority' => [
                    1 => null,
                ],
                'env' => [
                    1 => null,
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
        ],
        []
    );
},
34 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    '/register',
                ],
                'methods' => [
                    [],
                ],
                'schemes' => [
                    [],
                ],
                'name' => [
                    'app_register',
                ],
                'requirements' => [
                    [],
                ],
                'options' => [
                    [],
                ],
                'defaults' => [
                    [],
                ],
                'host' => [
                    null,
                ],
                'condition' => [
                    null,
                ],
                'priority' => [
                    null,
                ],
                'env' => [
                    null,
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
35 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    '/unsplash',
                ],
                'methods' => [
                    [],
                ],
                'schemes' => [
                    [],
                ],
                'name' => [
                    'app_unsplash',
                ],
                'requirements' => [
                    [],
                ],
                'options' => [
                    [],
                ],
                'defaults' => [
                    [],
                ],
                'host' => [
                    null,
                ],
                'condition' => [
                    null,
                ],
                'priority' => [
                    null,
                ],
                'env' => [
                    null,
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
36 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    '/admin/user',
                ],
                'methods' => [
                    [],
                ],
                'schemes' => [
                    [],
                ],
                'name' => [
                    null,
                ],
                'requirements' => [
                    [],
                ],
                'options' => [
                    [],
                ],
                'defaults' => [
                    [],
                ],
                'host' => [
                    null,
                ],
                'condition' => [
                    null,
                ],
                'priority' => [
                    null,
                ],
                'env' => [
                    null,
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
37 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    '/',
                ],
                'methods' => [
                    [
                        'GET',
                    ],
                ],
                'schemes' => [
                    [],
                ],
                'name' => [
                    'app_user_index',
                ],
                'requirements' => [
                    [],
                ],
                'options' => [
                    [],
                ],
                'defaults' => [
                    [],
                ],
                'host' => [
                    null,
                ],
                'condition' => [
                    null,
                ],
                'priority' => [
                    null,
                ],
                'env' => [
                    null,
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
38 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    '/{id}',
                ],
                'methods' => [
                    [
                        'GET',
                    ],
                ],
                'schemes' => [
                    [],
                ],
                'name' => [
                    'app_user_show',
                ],
                'requirements' => [
                    [],
                ],
                'options' => [
                    [],
                ],
                'defaults' => [
                    [],
                ],
                'host' => [
                    null,
                ],
                'condition' => [
                    null,
                ],
                'priority' => [
                    null,
                ],
                'env' => [
                    null,
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
39 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    '/{id}/edit',
                ],
                'methods' => [
                    [
                        'GET',
                        'POST',
                    ],
                ],
                'schemes' => [
                    [],
                ],
                'name' => [
                    'app_user_edit',
                ],
                'requirements' => [
                    [],
                ],
                'options' => [
                    [],
                ],
                'defaults' => [
                    [],
                ],
                'host' => [
                    null,
                ],
                'condition' => [
                    null,
                ],
                'priority' => [
                    null,
                ],
                'env' => [
                    null,
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
40 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Symfony\\Component\\Routing\\Annotation\\Route'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Component\\Routing\\Annotation\\Route')),
        ],
        null,
        [
            'Symfony\\Component\\Routing\\Annotation\\Route' => [
                'path' => [
                    '/{id}',
                ],
                'methods' => [
                    [
                        'POST',
                    ],
                ],
                'schemes' => [
                    [],
                ],
                'name' => [
                    'app_user_delete',
                ],
                'requirements' => [
                    [],
                ],
                'options' => [
                    [],
                ],
                'defaults' => [
                    [],
                ],
                'host' => [
                    null,
                ],
                'condition' => [
                    null,
                ],
                'priority' => [
                    null,
                ],
                'env' => [
                    null,
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
41 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Doctrine\\ORM\\Mapping\\Entity'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\Entity')),
        ],
        null,
        [
            'stdClass' => [
                'repositoryClass' => [
                    'App\\Repository\\CategoriecsaRepository',
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
42 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\Id'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\Id')),
            clone ($p['Doctrine\\ORM\\Mapping\\GeneratedValue'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\GeneratedValue')),
            clone ($p['Doctrine\\ORM\\Mapping\\Column'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\Column')),
        ],
        null,
        [
            'stdClass' => [
                'type' => [
                    2 => 'integer',
                ],
                'precision' => [
                    2 => null,
                ],
                'scale' => [
                    2 => null,
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
            $o[2],
        ],
        []
    );
},
43 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Doctrine\\ORM\\Mapping\\Column'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\Column')),
        ],
        null,
        [
            'stdClass' => [
                'type' => [
                    'string',
                ],
                'length' => [
                    255,
                ],
                'precision' => [
                    null,
                ],
                'scale' => [
                    null,
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
44 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Doctrine\\ORM\\Mapping\\OneToMany'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToMany')),
        ],
        null,
        [
            'stdClass' => [
                'mappedBy' => [
                    'id_categoriecsa',
                ],
                'targetEntity' => [
                    'App\\Entity\\Programme',
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
45 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Doctrine\\ORM\\Mapping\\Entity'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\Entity')),
        ],
        null,
        [
            'stdClass' => [
                'repositoryClass' => [
                    'App\\Repository\\DiffusionRepository',
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
46 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Doctrine\\ORM\\Mapping\\Column'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\Column')),
        ],
        null,
        [
            'stdClass' => [
                'type' => [
                    'date',
                ],
                'precision' => [
                    null,
                ],
                'scale' => [
                    null,
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
47 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Doctrine\\ORM\\Mapping\\Column'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\Column')),
        ],
        null,
        [
            'stdClass' => [
                'type' => [
                    'time',
                ],
                'precision' => [
                    null,
                ],
                'scale' => [
                    null,
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
48 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Doctrine\\ORM\\Mapping\\Column'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\Column')),
        ],
        null,
        [
            'stdClass' => [
                'type' => [
                    'boolean',
                ],
                'precision' => [
                    null,
                ],
                'scale' => [
                    null,
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
49 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ManyToOne'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOne')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumn'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumn')),
        ],
        null,
        [
            'stdClass' => [
                'targetEntity' => [
                    'App\\Entity\\Programme',
                ],
                'inversedBy' => [
                    'diffusions',
                ],
                'nullable' => [
                    1 => false,
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
        ],
        []
    );
},
50 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Doctrine\\ORM\\Mapping\\Entity'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\Entity')),
        ],
        null,
        [
            'stdClass' => [
                'repositoryClass' => [
                    'App\\Repository\\EmissionRepository',
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
51 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Doctrine\\ORM\\Mapping\\Column'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\Column')),
        ],
        null,
        [
            'stdClass' => [
                'type' => [
                    'string',
                ],
                'length' => [
                    255,
                ],
                'precision' => [
                    null,
                ],
                'scale' => [
                    null,
                ],
                'nullable' => [
                    true,
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
52 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Doctrine\\ORM\\Mapping\\Column'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\Column')),
        ],
        null,
        [
            'stdClass' => [
                'type' => [
                    'integer',
                ],
                'precision' => [
                    null,
                ],
                'scale' => [
                    null,
                ],
                'nullable' => [
                    true,
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
53 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Doctrine\\ORM\\Mapping\\OneToMany'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToMany')),
        ],
        null,
        [
            'stdClass' => [
                'mappedBy' => [
                    'id_emission',
                ],
                'targetEntity' => [
                    'App\\Entity\\Programme',
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
54 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ManyToOne'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOne')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumn'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumn')),
        ],
        null,
        [
            'stdClass' => [
                'targetEntity' => [
                    'App\\Entity\\Genre',
                ],
                'inversedBy' => [
                    'emissions',
                ],
                'nullable' => [
                    1 => false,
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
        ],
        []
    );
},
55 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Doctrine\\ORM\\Mapping\\Entity'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\Entity')),
        ],
        null,
        [
            'stdClass' => [
                'repositoryClass' => [
                    'App\\Repository\\GenreRepository',
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
56 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Doctrine\\ORM\\Mapping\\OneToMany'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToMany')),
        ],
        null,
        [
            'stdClass' => [
                'mappedBy' => [
                    'id_genre',
                ],
                'targetEntity' => [
                    'App\\Entity\\Emission',
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
57 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Doctrine\\ORM\\Mapping\\Entity'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\Entity')),
        ],
        null,
        [
            'stdClass' => [
                'repositoryClass' => [
                    'App\\Repository\\ProgrammeRepository',
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
58 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Doctrine\\ORM\\Mapping\\Column'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\Column')),
        ],
        null,
        [
            'stdClass' => [
                'type' => [
                    'bigint',
                ],
                'precision' => [
                    null,
                ],
                'scale' => [
                    null,
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
59 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Doctrine\\ORM\\Mapping\\OneToMany'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToMany')),
        ],
        null,
        [
            'stdClass' => [
                'mappedBy' => [
                    'id_programme',
                ],
                'targetEntity' => [
                    'App\\Entity\\Diffusion',
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
60 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ManyToOne'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOne')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumn'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumn')),
        ],
        null,
        [
            'stdClass' => [
                'targetEntity' => [
                    'App\\Entity\\Emission',
                ],
                'inversedBy' => [
                    'programmes',
                ],
                'nullable' => [
                    1 => false,
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
        ],
        []
    );
},
61 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ManyToOne'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOne')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumn'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumn')),
        ],
        null,
        [
            'stdClass' => [
                'targetEntity' => [
                    'App\\Entity\\Categoriecsa',
                ],
                'inversedBy' => [
                    'programmes',
                ],
                'nullable' => [
                    1 => false,
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
        ],
        []
    );
},
62 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\Entity'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\Entity')),
            clone ($p['Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntity'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntity')),
        ],
        null,
        [
            'stdClass' => [
                'repositoryClass' => [
                    'App\\Repository\\UserRepository',
                ],
                'groups' => [
                    1 => [
                        'Default',
                    ],
                ],
                'message' => [
                    1 => 'There is already an account with this username',
                ],
                'fields' => [
                    1 => [
                        'username',
                    ],
                ],
            ],
        ],
        [
            $o[0],
            $o[1],
        ],
        []
    );
},
63 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Doctrine\\ORM\\Mapping\\Column'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\Column')),
        ],
        null,
        [
            'stdClass' => [
                'type' => [
                    'string',
                ],
                'length' => [
                    180,
                ],
                'precision' => [
                    null,
                ],
                'scale' => [
                    null,
                ],
                'unique' => [
                    true,
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
64 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Doctrine\\ORM\\Mapping\\Column'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\Column')),
        ],
        null,
        [
            'stdClass' => [
                'type' => [
                    'json',
                ],
                'precision' => [
                    null,
                ],
                'scale' => [
                    null,
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},
65 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (\Symfony\Component\VarExporter\Internal\Registry::$prototypes['Doctrine\\ORM\\Mapping\\Column'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\Column')),
        ],
        null,
        [
            'stdClass' => [
                'type' => [
                    'string',
                ],
                'precision' => [
                    null,
                ],
                'scale' => [
                    null,
                ],
            ],
        ],
        [
            $o[0],
        ],
        []
    );
},

]];
";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:0:{}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}s:40:" phpDocumentor\Reflection\Php\File enums";a:0:{}s:43:" phpDocumentor\Reflection\Php\File metadata";a:0:{}}";